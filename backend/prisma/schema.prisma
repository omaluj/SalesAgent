// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Companies table - stores information about target companies
model Company {
  id          String   @id @default(cuid())
  name        String
  website     String?
  email       String?
  phone       String?
  address     String?
  industry    String?
  size        String?  // small, medium, large
  description String?
  
  // Contact person
  contactName     String?
  contactPosition String?
  contactEmail    String?
  contactPhone    String?
  
  // Status and tracking
  status      CompanyStatus @default(PENDING)
  source      String?       // how we found this company
  blacklisted Boolean       @default(false)
  blacklistReason String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  emailLogs   EmailLog[]
  calendarEvents CalendarEvent[]
  campaignCompanies CampaignCompany[]
  
  @@map("companies")
}

// Email logs - tracks all email communications
model EmailLog {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Email details
  to          String
  subject     String
  template    String
  content     String?  // HTML content
  
  // Status and tracking
  status      EmailStatus @default(SENT)
  sentAt      DateTime @default(now())
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  
  // Error handling
  errorMessage String?
  retryCount   Int      @default(0)
  maxRetries   Int      @default(3)
  
  // Metadata
  mailjetId   String?  // Mailjet message ID
  metadata    Json?    // Additional data
  
  @@map("email_logs")
}

// Calendar events - tracks scheduled meetings
model CalendarEvent {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // Event details
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  meetingLink String?
  
  // Google Calendar integration
  googleEventId String?
  googleCalendarId String?
  
  // Status
  status      EventStatus @default(SCHEDULED)
  confirmed   Boolean     @default(false)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("calendar_events")
}

// Time slots - stores available time slots for consultations
model TimeSlot {
  id          String   @id @default(cuid())
  
  // Slot details
  date        String   // YYYY-MM-DD format
  day         String   // Day name (Pondelok, Utorok, etc.)
  time        String   // Time (10:00, 11:00, etc.)
  available   Boolean  @default(true)
  
  // Booking details
  bookedBy    String?
  bookedAt    DateTime?
  
  // Google Calendar integration
  googleEventId String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([date, time])
  @@map("time_slots")
}

// Email templates - stores email templates
model EmailTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  subject     String
  content     String   // HTML content
  category    String?  // e.g., "skolky", "firmy", "startup", "upratovanie", "jazykove_skoly"
  
  // Template variables
  variables   Json?    // Array of variable names
  
  // Industry targeting
  targetIndustries String[] // Array of target industries
  targetSizes      String[] // Array of target company sizes
  
  // Campaign settings
  seasonalStart    String?  // e.g., "08-01" for August 1st
  seasonalEnd      String?  // e.g., "06-30" for June 30th
  isSeasonal       Boolean  @default(false)
  
  // Status
  active      Boolean  @default(true)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaigns   Campaign[]
  
  @@map("email_templates")
}

// Campaign management
model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  
  // Template and targeting
  templateId  String
  template    EmailTemplate @relation(fields: [templateId], references: [id])
  
  // Campaign settings
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  
  // Targeting filters
  targetIndustries String[] // Array of target industries
  targetSizes      String[] // Array of target company sizes
  targetRegions    String[] // Array of target regions
  
  // Schedule settings
  sendTime    String?  // e.g., "09:00" for 9 AM
  timezone    String   @default("Europe/Bratislava")
  maxEmailsPerDay Int  @default(50)
  
  // Status
  status      CampaignStatus @default(DRAFT)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  campaignCompanies CampaignCompany[]
  
  @@map("campaigns")
}

// Campaign-Company relationship
model CampaignCompany {
  id          String   @id @default(cuid())
  campaignId  String
  companyId   String
  
  // Campaign assignment
  assignedAt  DateTime @default(now())
  scheduledAt DateTime?
  sentAt      DateTime?
  
  // Email tracking
  emailId     String?
  status      CampaignCompanyStatus @default(ASSIGNED)
  
  // Relations
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, companyId])
  @@map("campaign_companies")
}

// Agent configuration - stores runtime configuration
model AgentConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  type        ConfigType @default(STRING)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("agent_config")
}

// Rate limiting - tracks API usage
model RateLimit {
  id          String   @id @default(cuid())
  service     String   // "mailjet", "google_calendar", "google_search"
  endpoint    String?
  count       Int      @default(1)
  windowStart DateTime
  windowEnd   DateTime
  
  @@unique([service, endpoint, windowStart])
  @@map("rate_limits")
}

// OAuth tokens - stores OAuth 2.0 tokens for Google APIs
model OAuthTokens {
  id           Int      @id @default(autoincrement())
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  scope        String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("oauth_tokens")
}

// Enums
enum CompanyStatus {
  PENDING     // Not contacted yet
  CONTACTED   // Email sent
  RESPONDED   // Company responded
  MEETING_SCHEDULED
  MEETING_COMPLETED
  CONVERTED   // Became a customer
  LOST        // Not interested
  BLACKLISTED
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
}

enum EventStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum CampaignCompanyStatus {
  ASSIGNED
  SCHEDULED
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
  COMPLETED
  NO_SHOW
}
