import { CronJob } from 'cron';
import logger from '../../utils/logger.js';
import { TimeSlotService } from './time-slot.service.js';
import { googleCalendarService } from './google-calendar.service.js';

export class SlotGeneratorService {
  private timeSlotService: TimeSlotService;
  private cronJob: CronJob | null = null;

  constructor() {
    this.timeSlotService = new TimeSlotService();
    this.initializeCronJob();
  }

  /**
   * Inicializuje cron job pre automatick√© generovanie slotov
   * Sp√∫≈°≈•a sa ka≈æd√Ω de≈à o 2:00 r√°no
   */
  private initializeCronJob(): void {
    // Cron expression: ka≈æd√Ω de≈à o 2:00 r√°no
    const cronExpression = '0 2 * * *';
    
    this.cronJob = new CronJob(cronExpression, async () => {
      logger.info('üïê Cron job: Zaƒç√≠nam kontrolu a generovanie slotov...');
      await this.checkAndGenerateSlots();
    }, null, false, 'Europe/Bratislava');

    logger.info('üìÖ Slot generator cron job inicializovan√Ω (ka≈æd√Ω de≈à o 2:00)');
  }

  /**
   * Spusti≈• cron job
   */
  startCronJob(): void {
    // TODO: Vypnut√© automatick√© generovanie - bude sa sp√∫≈°≈•a≈• manu√°lne
    // this.cronJob.start();
    logger.info('‚è∏Ô∏è  Automatick√Ω cron job je vypnut√Ω - sloty sa bud√∫ generova≈• manu√°lne');
  }

  /**
   * Zastav√≠ cron job
   */
  stopCronJob(): void {
    if (this.cronJob) {
      this.cronJob.stop();
      logger.info('üõë Slot generator cron job zastaven√Ω');
    }
  }

  /**
   * Kontroluje a generuje sloty ak je potrebn√©
   */
  async checkAndGenerateSlots(): Promise<void> {
    try {
      logger.info('üîç Kontrolujem dostupnos≈• slotov...');
      
      // Z√≠ska≈• aktu√°lne sloty
      const currentSlots = await this.timeSlotService.getTimeSlots();
      
      // Filtrova≈• len dostupn√© sloty (bez Google event ID)
      const availableSlots = currentSlots.filter(slot => !slot.googleEventId);
      
      // Filtrova≈• sloty, ktor√© s√∫ v bud√∫cnosti (aspo≈à 2 t√Ω≈ædne dopredu)
      const futureDate = new Date();
      futureDate.setDate(futureDate.getDate() + 14); // 2 t√Ω≈ædne dopredu
      
      const futureSlots = availableSlots.filter(slot => {
        const slotDate = new Date(slot.date);
        return slotDate >= futureDate;
      });

      logger.info(`üìä Anal√Ωza slotov:`);
      logger.info(`   - Celkovo slotov: ${currentSlots.length}`);
      logger.info(`   - Bez Google event: ${availableSlots.length}`);
      logger.info(`   - V bud√∫cnosti (2+ t√Ω≈ædne): ${futureSlots.length}`);

      // Ak m√°me menej ako 25 dostupn√Ωch slotov v bud√∫cnosti, generova≈• nov√©
      if (futureSlots.length < 25) {
        logger.info(`‚ö†Ô∏è  M√°lo slotov v bud√∫cnosti (${futureSlots.length}/25), generujem nov√©...`);
        await this.generateNewSlots();
      } else {
        logger.info(`‚úÖ Dostatoƒçn√Ω poƒçet slotov v bud√∫cnosti (${futureSlots.length})`);
      }

    } catch (error) {
      logger.error('‚ùå Chyba pri kontrole slotov:', error);
    }
  }

  /**
   * Generuje nov√© sloty s rate limiting
   */
  private async generateNewSlots(): Promise<void> {
    try {
      logger.info('üöÄ Zaƒç√≠nam generovanie nov√Ωch slotov...');
      
      // Z√≠ska≈• v≈°etky sloty
      const allSlots = await this.timeSlotService.getTimeSlots();
      
      // Filtrova≈• len sloty bez Google event ID
      const slotsToGenerate = allSlots.filter(slot => !slot.googleEventId);
      
      logger.info(`üìÖ Generujem ${slotsToGenerate.length} nov√Ωch Google Calendar eventov...`);
      
      let createdCount = 0;
      let errorCount = 0;
      
      for (const slot of slotsToGenerate) {
        try {
          logger.info(`‚è≥ Vytv√°ram event pre: ${slot.date} ${slot.time} (${slot.day})`);
          
          // Vytvori≈• event
          const slotDate = new Date(slot.date + 'T' + slot.time + ':00');
          const endDate = new Date(slotDate);
          endDate.setHours(endDate.getHours() + 1);

          const eventTitle = `Dostupn√© ƒçasov√© okno - ${slot.day} ${slot.time}`;
          const eventDescription = 'ƒåasov√© okno pre konzult√°ciu. Rezervujte si term√≠n cez n√°≈° web.';

          const event = await googleCalendarService.createEvent({
            title: eventTitle,
            description: eventDescription,
            startTime: slotDate,
            endTime: endDate,
            attendees: []
          });

          if (event?.success && event?.eventId) {
            createdCount++;
            logger.info(`‚úÖ Event vytvoren√Ω: ${event.eventId} (${createdCount}/${slotsToGenerate.length})`);
          } else {
            errorCount++;
            logger.error(`‚ùå Chyba pri vytv√°ran√≠ eventu: ${event?.error}`);
          }
          
          // Rate limiting - pauza 1 sekunda
          await new Promise(resolve => setTimeout(resolve, 1000));
          
        } catch (error) {
          errorCount++;
          logger.error(`‚ùå Chyba pri vytv√°ran√≠ eventu pre ${slot.date} ${slot.time}:`, error);
          
          // Pokraƒçova≈• s ƒèal≈°√≠m slotom aj pri chybe
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
      
      logger.info(`üéâ Generovanie dokonƒçen√©!`);
      logger.info(`‚úÖ √öspe≈°ne vytvoren√©: ${createdCount} eventov`);
      logger.info(`‚ùå Chyby: ${errorCount} eventov`);
      
    } catch (error) {
      logger.error('‚ùå Chyba pri generovan√≠ nov√Ωch slotov:', error);
    }
  }

  /**
   * Manu√°lne spust√≠ generovanie slotov (pre admin)
   */
  async manualGenerate(): Promise<{ success: boolean; message: string; created: number; errors: number }> {
    try {
      logger.info('üîß Manu√°lne generovanie slotov spusten√©...');
      
      const allSlots = await this.timeSlotService.getTimeSlots();
      const slotsToGenerate = allSlots.filter(slot => !slot.googleEventId);
      
      if (slotsToGenerate.length === 0) {
        return {
          success: true,
          message: 'V≈°etky sloty u≈æ maj√∫ Google Calendar eventy',
          created: 0,
          errors: 0
        };
      }
      
      let createdCount = 0;
      let errorCount = 0;
      
      for (const slot of slotsToGenerate) {
        try {
          const slotDate = new Date(slot.date + 'T' + slot.time + ':00');
          const endDate = new Date(slotDate);
          endDate.setHours(endDate.getHours() + 1);

          const eventTitle = `Dostupn√© ƒçasov√© okno - ${slot.day} ${slot.time}`;
          const eventDescription = 'ƒåasov√© okno pre konzult√°ciu. Rezervujte si term√≠n cez n√°≈° web.';

          const event = await googleCalendarService.createEvent({
            title: eventTitle,
            description: eventDescription,
            startTime: slotDate,
            endTime: endDate,
            attendees: []
          });

          if (event?.success && event?.eventId) {
            createdCount++;
          } else {
            errorCount++;
          }
          
          // Rate limiting
          await new Promise(resolve => setTimeout(resolve, 1000));
          
        } catch (error) {
          errorCount++;
        }
      }
      
      return {
        success: true,
        message: `Generovanie dokonƒçen√©: ${createdCount} vytvoren√Ωch, ${errorCount} ch√Ωb`,
        created: createdCount,
        errors: errorCount
      };
      
    } catch (error) {
      logger.error('‚ùå Chyba pri manu√°lnom generovan√≠:', error);
      return {
        success: false,
        message: 'Chyba pri generovan√≠ slotov',
        created: 0,
        errors: 0
      };
    }
  }
}

// Export singleton instance
export const slotGeneratorService = new SlotGeneratorService();
